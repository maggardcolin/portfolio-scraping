GoFish - Java
Main focus: Artificial intelligence
Approximate time spent: 5+ hours
I built this project off of parts of a scrapped card game project that I had been developing, and wanted to make an interactive game that
a user could play against a computer player with an intelligent decision making process.
This computer can remember which cards the player has asked for, and will not ask for the same card twice if it is sure you don't have it.
I created this project in December 2023 and would describe this as a very basic
AI project due to the computer player having the ability to make intelligent decisions that aren't entirely based on random chance.
Click this box if you want to check out the code associated with this project.
How it works
Each player has a hand, as well as a point total that is updated each time a pair is made. The deck/pond and each of these
hands use an ArrayList datastructure to store the Card objects. The computer will ask you for cards in this order: cards that it knows you have,
cards that it has that it hasn't asked you for already, and finally cards that it has that it has already asked for.
Each player's hand is checked for pairs after each move, and it is
possible to play a full game against the computer. This game follows what I would consider to be
standard rules for GoFish, but individual rules are not difficult to implement and I may consider adding a way to change them, such as
the number of cards drawn when your hand is empty, or using 4-of-a-kinds instead of pairs for points.

Portfolio Website - HTML/CSS/JavaScript
Main focus: Web design
Approximate time spent: 90+ hours
My main focus for this project was to become more comfortable with web design and scripting and completely build an
entire page from the ground up. My projects and
experience pages include a filtering and sorting system that I developed using JavaScript, and my coursework page
includes an interactive course map that I created using an HTML image map over a
Sankey diagram. I also spent time making this website responsive so that
it updates appropriately on different devices and resolutions. After this project, I am more comfortable with web design,
and I am planning on learning and implementing other web technologies in the future to this website and others. To read more
about this project, click on this box to go to the "About" page.

Inventory Management - Java
Main focus: Database manipulation
Approximate time spent: 8+ hours
I created this program in order to serve as a prototype for the backend for a mockup of an online merchandise
storefront that I was developing for a friend at the time.
This program allows a user to view and modify a database containing items with various attributes, such as quantity and price.
The user is able to add or remove items, restock and sell items. Click this box if you want to check out the code associated with this project.
How it works
I stored each of the items into a CSV (comma-separated values) file, which is commonly used for storing datasets. This file is loaded when the program is run, and each item is then read in from the csv file
and placed into an ArrayList, which is a data structure that can hold references to each item. Each item's data is associated with it, and it is placed as an entire package (object) in
the ArrayList. The user is able to modify the quantities of items in this ArrayList using commands, and once these commands are executed, the CSV file is overwritten in the same format that
it was originally in.

Secret Santa App - Java
Main focus: Hashmaps
Approximate time spent: 5+ hours
Trying to assign names for a Secret-Santa style gift exchange is fairly annoying, especially when someone is assigned
their own name and the entire process has to be restarted. The goal for this program was to match
each participant's name with a different name, while avoiding the event of someone getting assigned their own name.
This project utilized the programming concepts that I was learning in my CS 400 class in Fall 2023, including hashmaps,
circular indices, and frontend/backend development. Click this box if you want to check out the code associated with this project.
How it works
The app prompts the user for how many people are participating in
the secret santa gift exchange, then for the names of each of the users. It then
sequentially assigns each user a different name, and restarts the entire process if anyone's name
is matched to themselves. I stored each name pair in a hashmap data structure and checked to see if
the person was to matched to their own name to determine if the process should be restarted.
The names are all currently displayed at once, intended to be read by a non-participating third party, but
I am planning on implementing file output or SMS options in the code so that the names are not revealed.
I am also planning on creating an executable desktop app out of this eventually so that it can be run
by anyone on their computer without needing coding knowledge.

Pong Game - Verilog (created in ECE 352)
Main focus: Digital system design
Approximate time spent: 20+ hours
I made this project with Tyler Jordan in ECE 352: Digital System Fundamentals. We collaboratively developed code in Verilog to
program a Field Programmable Gate Array (FPGA) board using Intel Quartus Prime. The board we used was the Altera DE2-115.
We created and implemented a finite state machine that allowed two players to play a timing-sensitive game of Pong on this FPGA board.
In our demonstration of the project, Tyler beat me in Pong.
How it works
Scores and game logic are updated using internal Boolean logic and displayed on a set of 7-segment displays.
Player input, reset, and pause functionality are implemented through the use of switches on the FPGA board.
We used Verilog testbench programs in order to simulate and record output of our program under various conditions.

Statistical Data Generator App - Python
Main focus: Application of random walks
Approximate time spent: 5+ hours
The goal for this app was to create a program that would generate a set of numbers that correspond to
a user-specified set of statistical parameters, namely mean and standard deviation. This program has options to
control the number of decimal places (precision), number of points generated, and maximum amount error permissible.
I created this project in Spring 2022 and it was partially because of my work on this project that I became interested
in programming and going to school for it. Click this box if you want to check out the code associated with this project.
How it works
This program prompts the user for their intended average, standard deviation, number of data points, and a few other specifications,
then makes a few intermediary calculations. The main loop body starts off by determining the "differential" of the point, that is, how far off it is from the desired mean
value. It then adds in any factors to be considered from the previous iterations of the loop, if any, and then updates a value called "leftovers" that
represents the amount of "pull" we need in order to "balance" the data points around the desired mean. The created point is then appended to an array of numbers
and the program repeats until all data points are created. There is a file output option as well.

Wordle Clone - JavaScript (created in AP Computer Science Principles)
Main focus: User interfaces
Approximate time spent: 10+ hours
I created this project for the 2022 AP Computer Science Principles Create Task portion of the AP Exam.
My goal was to create a word-guessing game in the style of Wordle, which was extremely popular at the time.
I received a 5 on the AP CSP exam.
How it works
A random word from a very long list of five letter words is picked, and the user's guesses are checked
against this list to ensure that their guesses are valid.
There are limits on the input length and number of guesses that the user can use. Once the word has been
correctly guessed, or the user runs out of guesses, the game ends and a results screen is displayed, where the user
can choose to restart the game or not.

Social Network - Java (created in CS 400)
Main focuses: Dijkstra's algorithm, collaboration
Approximate time spent: 20+ hours
This project simulates a social media app, in which users are able to befriend other users and are
able view various pieces of data about the network. This data includes shortest path between two users,
total number of users, total number of friendships, and average number of friendships per user. This project
was implemented using a CSV parsing, a hashmap, and Dijkstra's algorithm. I created
the backend/processing half of the project, and my partner created the UI/UX of the app.
How it works
Data is read in through a CSV file at the start, and the program determines if a new user-pair has been made. That is,
a pair of users that have not been registered as friends, and are not the same person. Next, each user is placed into a
node in the graph structure, and an undirected edge is constructed between users who are friends. Dijkstra's algorithm is
used to find the shortest path between two friends (think of it as a chain of mutual friends,
or how !link-here! work), and data is displayed in the console.
Links used:<a href="https://oracleofbacon.org/">Bacon numbers</a>
